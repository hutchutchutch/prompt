Below is a ready-to-hand-off spec you can paste into the “builder” LLM prompt.
It gives the other model everything it needs—data shape, Zustand slice, Framer-Motion variants, timeline, skeletons, glow math, and Tailwind tokens—to write production-quality code in one go.

0. Core Stack

Concern	Choice
Framework	React 18 CSR (create-vite)
Animation lib	Framer Motion v11
State	Zustand (promptStore)
Styling	Tailwind v3
Odometer numbers	react-odometerjs (tiny lib)
1. Data Contracts
ts
Copy
Edit
/* prompts.ts ------------------------------------------------*/
export interface PromptCard {
  id: string;          // “cot”, “fewshot”, etc.
  title: string;       // “Chain of Thought”
  task: string;        // “Explanation”
  content: string;     // prompt text
}

export const prompts: PromptCard[] = [ /*…*/ ];

/* models.ts -------------------------------------------------*/
export interface ModelCard {
  id: string;          // “claude-opus”
  title: string;       // “Claude 3 Opus”
  content: string;     // answer snippet
}

export const models: ModelCard[] = [ /*…*/ ];

/* evaluations.ts -------------------------------------------*/
export interface EvalMetrics {
  promptId: string;        // fk -> PromptCard.id
  modelId: string;         // fk -> ModelCard.id
  score: number;           // 0-5 float
  coverage: number;        // 0-1
  retention: number;       // 0-1
  flow: number;            // 0-1
  factual: number;         // 0-1
  tokensIn: number;
  tokensOut: number;
  latencyFirst: number;    // ms
  latencyTotal: number;    // ms
  costUsd: number;
}
2. Zustand Slice
ts
Copy
Edit
import { create } from 'zustand';
import { prompts, models, EvalMetrics } from '@/data';

interface PromptState {
  promptIdx: number;
  modelIdx: number;
  metrics: EvalMetrics | null;   // current eval
  loading: boolean;
  // actions
  nextPrompt: () => void;
  fetchMetrics: (p: number, m: number) => Promise<void>;
}

export const usePromptStore = create<PromptState>((set) => ({
  promptIdx: 0,
  modelIdx: 0,
  metrics: null,
  loading: true,
  nextPrompt: () => set((s) => ({ promptIdx: (s.promptIdx + 1) % prompts.length })),
  fetchMetrics: async (p, m) => {
    set({ loading: true });
    // simulate latency; later replace with real fetch
    const data = await fakeFetchEval(p, m);
    set({ metrics: data, loading: false });
  },
}));
The hero section subscribes to promptIdx, modelIdx, metrics, loading.

3. Carousel + Card Variants
tsx
Copy
Edit
// shared transforms in px; container perspective = 1000px
const cardVariants = {
  active:   { x:   0,   z:   0, opacity: 1, scale: 1,  rotateY:   0,  transition },
  prev:     { x: '-30%', z: -80, opacity: .8, scale: .9, rotateY:  15, transition },
  next:     { x:  '30%', z: -80, opacity: .8, scale: .9, rotateY: -15, transition },
  inactive: { z: -120,  opacity: 0, scale: .75,          transition },
};

const transition = { duration: 0.5, ease: 'easeInOut' };
Component skeleton:

tsx
Copy
Edit
<motion.div
  className="absolute top-0 left-0 right-0 mx-auto h-[200px] w-full max-w-[250px] transition-all"
  variants={cardVariants}
  animate={getPosition(i, idx, arrLen)}   // fn returns 'active'|'prev'|'next'|'inactive'
  whileHover={{ scale: 1.02 }}
/>
autoplay + pause-on-hover
tsx
Copy
Edit
// in PromptCarousel.tsx
const { nextPrompt } = usePromptStore();
useEffect(() => {
  const id = setInterval(nextPrompt, 2000);   // 2 s cadence
  return () => clearInterval(id);
}, []);

return (
  <motion.div onHoverStart={() => clearInterval(id)}
              onHoverEnd={() => id = setInterval(nextPrompt, 2000)}>
    {/* cards */}
  </motion.div>
);
Lower ModelCarousel duplicates the pattern but advances modelIdx in its own setInterval.

4. Evaluation Card Timeline
On promptIdx OR modelIdx change

ts
Copy
Edit
useEffect(() => fetchMetrics(promptIdx, modelIdx), [promptIdx, modelIdx]);
Skeleton Loader

tsx
Copy
Edit
{loading ? <SkeletonCard /> : <MetricsCard />}
MetricsCard internal animation

Wrap each numeric field with <Odometer value={metrics.score} format="d" duration={500} />.

Provide an onComplete callback once the last odometer finishes.

Glow Layer

tsx
Copy
Edit
const glowVariants = {
  hidden: { opacity: 0, scale: 0 },
  visible: (score: number) => ({
    opacity: 0.7 * (score / 5),
    scale:   0.4 + 0.6 * (score / 5),   // min .4 → max 1
    transition: { duration: .4, ease: 'easeInOut' }
  }),
};

<motion.div
  className="absolute inset-0 rounded-lg bg-teal-400/50 blur-2xl"
  variants={glowVariants}
  initial="hidden"
  animate="visible"
  custom={metrics.score}
/>
MetricsCard renders the glow layer behind its content; the glow’s animate prop is triggered in the odometer onComplete.

5. Tailwind Cheat-sheet
css
Copy
Edit
/* tailwind.config.js */
theme: {
  extend: {
    colors: {
      bg: '#121212',
      card: '#161616',
      teal: { DEFAULT: '#4FF8E5' },
    },
    boxShadow: {
      card: '0 4px 12px rgba(0,0,0,.3)',
    },
    keyframes: {
      // optional subtle float for active card
      float: { '0%,100%': { transform: 'translateY(-1%)' }, '50%': { transform: 'translateY(1%)' } },
    },
    animation: {
      float: 'float 6s ease-in-out infinite',
    },
  },
}
6. SSR / Hydration Notes
Wrap all Framer components in a dynamic import with { ssr: false } if using Next.js.

Because carousels rely on window timers, guard any setInterval in useEffect (“if (!window) return”).

